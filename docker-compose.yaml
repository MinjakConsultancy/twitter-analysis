version: "3"

services:
  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    container_name: twitter_infra_zookeeper
    ports:
      - "2181:2181"
    expose: 
      - "2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ../persistence/zoo1/data:/data
      - ../persistence/zoo1/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka1
    container_name: twitter_infra_kafka1
    ports:
      - "9092:9092"
    #expose:
    #  - "9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ../persistence/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:5.5.1
    container_name: twitter_infra_kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    #expose:
    #  - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ../persistence/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka3:
    image: confluentinc/cp-kafka:5.5.1
    container_name: twitter_infra_kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    #expose:
    #  - "9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ../persistence/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.1.1
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - zoo1
#    volumes:
#      - $PWD/connectors:/tmp/connectors
#      - $PWD/dashboard:/tmp/dashboard
    command: "bash -c 'echo Waiting for Kafka to be ready...  && \
                       cub kafka-ready -b kafka1:19092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zoo1:2181 --partitions 2 --replication-factor 2 --topic tweet-topic && \
                       kafka-topics --create --if-not-exists --zookeeper zoo1:2181 --partitions 2 --replication-factor 2 --topic enriched-tweet-topic && \
                       kafka-topics --create --if-not-exists --zookeeper zoo1:2181 --partitions 2 --replication-factor 2 --topic word-topic && \
                       echo Everyting set... lets roll... '"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored


#  kafka-topics-ui:
#    image: landoop/kafka-topics-ui:0.9.4
#    hostname: kafka-topics-ui
#    container_name: twitter_infra_topics_ui
#    ports:
#      - "8005:8000"
#    expose: 
#      - "8005"
#    environment:
#      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
#      PROXY: "true"
#    depends_on:
#      - zoo1
#      - kafka1
#      - kafka2
#      - kafka3
#      - kafka-schema-registry
#      - kafka-rest-proxy
#
#  kafka-schema-registry:
#    image: confluentinc/cp-schema-registry:5.5.1
#    hostname: kafka-schema-registry
#    container_name: twitter_infra_kafka_schemaregistry
#    ports:
#      - "8081:8081"
#    expose:
#      - "8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
#      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#    depends_on:
#      - zoo1
#      - kafka1
#
#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:5.5.1
#    hostname: kafka-rest-proxy
#    container_name: twitter_infra_kafka_rest
#    ports:
#      - "8082:8082"
#    expose: 
#      - "8082"
#    environment:
#      #KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
#      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
#    depends_on:
#      - zoo1
#      - kafka1
#      - kafka-schema-registry

  mongodb:
    container_name: twitter_infra_mongodb
    image: mongo
    restart: on-failure
    volumes:
      - '../persistence/mongodb:/data/db'
    ports:
      - "27017:27017"
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  elastic:
    container_name: twitter_infra_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    environment:
      - node.name=elastic
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elastic,elastic2
      - discovery.seed_hosts=elastic2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ../persistence/elastic:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    expose:
      - "9200"

  elastic2:
    container_name: twitter_infra_elasticsearch2
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    environment:
      - node.name=elastic2
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elastic,elastic2
      - discovery.seed_hosts=elastic
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ../persistence/elastic2:/usr/share/elasticsearch/data
    ports:
      - 9201:9200
    expose:
      - "9201"

  kibana:
    container_name: twitter_infra_kibana
    image: docker.elastic.co/kibana/kibana:7.12.0
    volumes:
      - ./infra/kibana.yml:/usr/share/kibana/config/kibana.yml
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: '["http://elastic:9200","http://elastic2:9200"]' 
      SERVER_BASEPATH: /kibana
    depends_on:
      - elastic
      - elastic2

  neo4j:
    container_name: twitter_infra_neo4j
    image: neo4j
    volumes:
      - ../persistence/neo4j:/data
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      NEO4J_AUTH: none

  build_python:
    container_name: build_python
    build: ./processing
    image: minjak/twitter_processing

  twitter2kafka:
    container_name: twitter_proc_twitter2kafka
    image: minjak/twitter_processing
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_twitter_to_kafka.py
    depends_on: 
        - kafka1
        - kafka2
        - kafka3
                      
  kafka2kafka:
    container_name: twitter_proc_kafka2kafka
    image: minjak/twitter_processing
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_kafka.py
    depends_on: 
        - kafka1
        - kafka2
        - kafka3
        - mongodb

  kafka2elastic_tweet:
    image: minjak/twitter_processing
    container_name: twitter_proc_kafka2elastic_tweet
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_elasticsearch.py
      INDEX: TWEET
    depends_on: 
        - kafka1
        - kafka2
        - kafka3
        - elastic
    
  kafka2elastic_word:
    image: minjak/twitter_processing
    container_name: twitter_proc_kafka2elastic_word
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_elasticsearch.py
      INDEX: WORD
    depends_on: 
        - kafka1
        - kafka2
        - kafka3
        - elastic
    
  kafka2mongodb_tweet:
    image: minjak/twitter_processing
    container_name: twitter_proc_kafka2mongodb_tweet
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_mongodb.py
      INDEX: TWEET
    depends_on: 
      - kafka1
      - kafka2
      - kafka3
      - mongodb
      
  kafka2mongodb_word:
    image: minjak/twitter_processing
    container_name: twitter_proc_kafka2mongodb_word
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_mongodb.py
      INDEX: WORD
    depends_on: 
      - kafka1
      - kafka2
      - kafka3
      - mongodb
                      
#  recalc_sentiment_mongodb:
#    image: minjak/twitter_processing
#    container_name: twitter_proc_recalc_sentiment_mongo
#    volumes:
#      - ./config/.:/tmp/config
#    environment: 
#      CONFIG_DIR: /tmp/config
#      PYTHON_COMMAND: proces_mongodb_tweet_sentiment.py
#    depends_on: 
#      - mongodb
#      
  replay_tweets:
    image: minjak/twitter_processing
    container_name: twitter_proc_replay_tweets
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: replay_tweets.py
      NUMBER_OF_TWEETS_REPLAYED: 30
    depends_on: 
      - mongodb
      - kafka1
      - kafka2
      - kafka3
      - kafka2kafka
      - kafka2elastic_word
      - kafka2elastic_tweet
      

  kafka2neo4j:
    container_name: twitter_proc_kafka2neo4j
    image: minjak/twitter_processing
    volumes:
      - ./config/.:/tmp/config
    environment: 
      CONFIG_DIR: /tmp/config
      PYTHON_COMMAND: proces_kafka_to_neo4j.py
    depends_on: 
        - kafka1
        - kafka2
        - kafka3
        - neo4j

  backend:
    build: ./backend
    image: minjak/twitter_backend  
    container_name: twitter_backend
    ports:
       - 3001:3000
    # expose: # so not visible expect for docker containers
    #   - 3001
    depends_on: 
      - mongodb

  frontend:
    build: ./frontend
    image: minjak/twitter_frontend  
    container_name: twitter_frontend
    ports:
      - 4200:4200
      - 8083:8083
    expose: # so not visible expect for docker containers
    #  - 4200
      - 8083
    depends_on:
      - backend
      - kibana
      - neo4j
        
networks:
  default:
    external:
      name: twitter-analysis-network